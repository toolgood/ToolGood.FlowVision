





删除类  public
删除   public const  并简化
删除 没有用到的 public ITerminalNode 

删除 [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
删除 [System.CLSCompliant(false)]

删除  [RuleVersion(0)]


 简化 Accept， 如下
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
		{
			ImathVisitor<TResult> typedVisitor = visitor as ImathVisitor<TResult>;
			 return typedVisitor.VisitExpr2_fun(this);
		}

if \(!\(Precpred.*\r\n\t*  -> 删除

State = \d+;\r\n[ \t]+State =    ->   State =

return GetRuleContext<ExprContext>\(i\);\r\n   -> return GetRuleContext<ExprContext>(i);

public ExprContext expr\(int i\) \{\r\n    ->   //public ExprContext expr(int i) {

\bState = (\d+);\r\n[ \t]*(expr|Match)\(   -> State$2($1,
 
\bState = (\d+);\r\n[ \t]*ErrorHandler.Sync\(this\);   -> StateErrorHandler($1);

StateMatch\((\d+), (\d+)\);\r\n[ \t]*(StateMatch|Stateexpr)\(  -> $3($1,$2,
StateMatch\((\d+), (\d+)\, (\d+)\, (\d+)\);\r\n[ \t]*(StateMatch|Stateexpr)\(  -> $3($1,$2,


 private void Stateexpr(int a, int b)
    {
        State = a;
        expr(b);
    }
    private void StateMatch(int a, int b)
    {
        State = a;
        Match(b);
    }
        private void StateErrorHandler(int a )
        {
            State = a;
            ErrorHandler.Sync(this);
        }


删除 expr_sempred
删除 [NotNull]


删除 _LiteralNames
删除 _SymbolicNames
删除 DefaultVocabulary
删除 ruleNames
Vocabulary 返回null


	public override string GrammarFileName { get { return null; } }
	public override string[] RuleNames { get { return null; } }


